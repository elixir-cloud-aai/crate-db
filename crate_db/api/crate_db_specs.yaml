openapi: 3.1.0
info:
  title: "OpenAPI specification for managing RO-Crates"
  description: "Microservice for managing RO-Crates"
  version: 0.1.0
servers:
  - url: /elixircloud/roc/v1

paths:
  /service-info:
    post:
      summary: 'Create new service information'
      description: 'Create a new service information resource.'
      operationId: createServiceInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        201:
          description: Identifier of the created RO-Crate resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateROCResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/UnexpectedError'

    get:
      description: |-
        Provides information about the service, this structure is based on the
        standardized GA4GH service info structure. In addition, this endpoint
        will also provide information about customized storage endpoints offered
        by the TES server.
      operationId: getServiceInfo
      responses:
        200:
          description: 'A successful operation to request the service information about this running service.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/UnexpectedError'

    put:
      summary: 'Update existing service information'
      description: 'Update an existing service information resource.'
      operationId: updateServiceInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        204:
          description: No Content
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /ro-crates:
    post:
      summary: Create RO-Crate resource
      description: Create a new RO-Crate resource.
      operationId: createROC
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              x-body-name: createROCRequestBody
              $ref: '#/components/schemas/CreateROCRequestBody'
      responses:
        201:
          description: Identifier of the created RO-Crate resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateROCResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/UnexpectedError'

    get:
      summary: List all RO-Crate resources
      description: Retrieve a list of all RO-Crate resources stored in the database.
      operationId: listROCs
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ROCrateBody'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /ro-crates/{roc-id}:
    get:
      summary: Retrieve a specific RO-Crate resource by ID
      description: Retrieve a specific RO-Crate resource stored in the database.
      operationId: getROC
      parameters:
        - name: roc-id
          in: path
          description: An identifier referencing an RO-Crate resource.
          required: true
          schema:
            type: string
            example: "260e7aa0-2e07-484e-9da7-ee19fdd1800d"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ROCrateBody'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/UnexpectedError'

    put:
      summary: Update an existing RO-Crate resource
      description: Update an existing RO-Crate resource.
      operationId: updateROC
      parameters:
        - name: roc-id
          in: path
          description: An identifier referencing an RO-Crate resource.
          required: true
          schema:
            type: string
            example: "260e7aa0-2e07-484e-9da7-ee19fdd1800d"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              x-body-name: updateROCRequestBody
              $ref: '#/components/schemas/CreateROCResponse'
      responses:
        204:
          description: No Content
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/UnexpectedError'

components:
  schemas:
    Service:
      description: 'GA4GH service'
      type: object
      required:
        - id
        - name
        - type
        - organization
        - version
      properties:
        id:
          type: string
          description: 'Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.'
          example: 'org.ga4gh.myservice'
        name:
          type: string
          description: 'Name of this service. Should be human readable.'
          example: 'My project'
        type:
          $ref: '#/components/schemas/ServiceType'
        description:
          type: string
          description: 'Description of the service. Should be human readable and provide information about the service.'
          example: 'This service provides...'
        organization:
          type: object
          description: 'Organization providing the service'
          required:
            - name
            - url
          properties:
            name:
              type: string
              description: 'Name of the organization responsible for the service'
              example: 'My organization'
            url:
              type: string
              format: uri
              description: 'URL of the website of the organization (RFC 3986 format)'
              example: 'https://example.com'
        contactUrl:
          type: string
          format: uri
          description: 'URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).'
          example: 'mailto:support@example.com'
        documentationUrl:
          type: string
          format: uri
          description: 'URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.'
          example: 'https://docs.myservice.example.com'
        createdAt:
          type: string
          format: date-time
          description: 'Timestamp describing when the service was first deployed and available (RFC 3339 format)'
          example: '2019-06-04T12:58:19Z'
        updatedAt:
          type: string
          format: date-time
          description: 'Timestamp describing when the service was last updated (RFC 3339 format)'
          example: '2019-06-04T12:58:19Z'
        environment:
          type: string
          description: 'Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.'
          example: 'test'
        version:
          type: string
          description: 'Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.'
          example: '1.0.0'

    ServiceType:
      description: 'Type of a GA4GH service'
      type: object
      required:
        - group
        - artifact
        - version
      properties:
        group:
          type: string
          description: 'Namespace in reverse domain name format. Use `org.ga4gh` for implementations compliant with official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or implementations diverging from official GA4GH specifications, use a different namespace (e.g. your organization''s reverse domain name).'
          example: 'org.ga4gh'
        artifact:
          type: string
          description: 'Name of the API or GA4GH specification implemented. Official GA4GH types should be assigned as part of standards approval process. Custom artifacts are supported.'
          example: 'beacon'
        version:
          type: string
          description: 'Version of the API or specification. GA4GH specifications use semantic versioning.'
          example: '1.0.0'

    CreateROCRequestBody:
      type: object
      properties:
        rocrate:
          type: string
          format: binary
          description: The RO-Crate file to upload.
          example: rocrate.zip
        description:
          type: string
          description: A description of the RO-Crate.
          example: This is an example description of an RO-Crate.
        title:
          type: string
          description: The title of the RO-Crate.
          example: Example RO-Crate
        zenodo_info:
          type: object
          description: Additional information for Zenodo.
          example:
            doi: 10.1234/example.doi
            metadata: {...}
      required:
        - rocrate
        - title
        - description

    CreateROCResponse:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          description: The unique identifier for the RO-Crate.
          example: 260e7aa0-2e07-484e-9da7-ee19fdd1800d

    ROCrateBody:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          description: The unique identifier for the RO-Crate.
          example: 260e7aa0-2e07-484e-9da7-ee19fdd1800d
        rocrate:
          type: string
          description: The link to the RO-Crate file in MinIO.
          example: https://minio.example.com/ro-crates/rocrate.zip
        created_at:
          type: string
          format: date-time
          description: The creation date of the RO-Crate.
          example: 2023-01-01T12:00:00Z
        updated_at:
          type: string
          format: date-time
          description: The last update date of the RO-Crate.
          example: 2023-01-02T12:00:00Z
        user_id:
          type: string
          format: uuid
          description: The user ID extracted from the access token.
          example: 260e7aa0-2e07-484e-9da7-ee19fdd1800d
        title:
          type: string
          description: The title of the RO-Crate.
          example: Example RO-Crate
        description:
          type: string
          description: A description of the RO-Crate.
          example: This is an example description of an RO-Crate.
        zenodo_info:
          type: object
          description: Additional information for Zenodo.
          example:
            doi: 10.1234/example.doi
            metadata: {...}
      required:
        - _id
        - rocrate
        - created_at
        - updated_at
        - user_id
        - title
        - description

    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type. When dereferenced, it might provide human-readable documentation for the problem type.
        title:
          type: string
          description: A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for localization purposes.
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem. It might provide further information if dereferenced.
        code:
          type: integer
          format: int32
          description: Application-specific error code.
        message:
          type: string
          description: A detailed error message.
          
      required:
        - type
        - title
        - status
        - detail
  
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    UnexpectedError:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  parameters:
    roc-id:
      name: roc-id
      in: path
      description: An identifier referencing an RO-Crate resource.
      required: true
      schema:
        type: string
        format: uuid
        example: 260e7aa0-2e07-484e-9da7-ee19fdd1800d
